<html><head></head><body style="overflow-wrap: break-word; -webkit-nbsp-mode: space; line-break: after-white-space;"><div>import {</div><div>&nbsp; defineStackbitConfig,</div><div>&nbsp; DocumentWithSource,</div><div>&nbsp; TreeViewNode,</div><div>} from '@stackbit/types'</div><div><br></div><div>export default defineStackbitConfig({</div><div>&nbsp; stackbitVersion: '~0.6.0',</div><div>&nbsp; contentSources: [</div><div>&nbsp; &nbsp; /* ... */</div><div>&nbsp; ],</div><div>&nbsp; treeViews: async ({ getDocuments }) =&gt; {</div><div>&nbsp; &nbsp; const children: TreeViewNode['children'] = getPages(getDocuments()).map(</div><div>&nbsp; &nbsp; &nbsp; (document) =&gt; ({</div><div>&nbsp; &nbsp; &nbsp; &nbsp; document,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; label: getFieldValue(document, 'title'),</div><div>&nbsp; &nbsp; &nbsp; }),</div><div>&nbsp; &nbsp; )</div><div>&nbsp; &nbsp; return [</div><div>&nbsp; &nbsp; &nbsp; { label: 'Site Pages', children, stableId: 'pages-tree' },</div><div>&nbsp; &nbsp; ] as TreeViewNode[]</div><div>&nbsp; },</div><div>})</div><div><br></div><div>function getFieldValue(page: DocumentWithSource, field: string) {</div><div>&nbsp; const fieldObject = page.fields[field]</div><div>&nbsp; if (!fieldObject || !('value' in fieldObject)) return</div><div>&nbsp; return fieldObject.value</div><div>}</div><div><br></div><div>function getPages(documents: DocumentWithSource[]) {</div><div>&nbsp; return documents.filter((document) =&gt; document.modelName === 'Page')</div><div>}</div></body></html>